import { RateLimiter } from "limiter";
import { defineEventHandler, getRequestHeader, createError } from "h3";
import cache from "memory-cache";
import { useRuntimeConfig } from "#imports";
const securityConfig = useRuntimeConfig().security;
export default defineEventHandler(async (event) => {
  const ip = getRequestHeader(event, "x-forwarded-for");
  if (!cache.get(ip)) {
    const cachedLimiter = new RateLimiter(securityConfig.rateLimiter.value);
    cache.put(ip, cachedLimiter, 1e4);
  } else {
    const cachedLimiter = cache.get(ip);
    if (cachedLimiter.getTokensRemaining() > 1) {
      await cachedLimiter.removeTokens(1);
      cache.put(ip, cachedLimiter, 1e4);
    } else {
      if (securityConfig.rateLimiter.throwError) {
        throw createError({ statusCode: 429, statusMessage: "Too Many Requests" });
      } else {
        return { statusCode: 429, statusMessage: "Too Many Requests" };
      }
    }
  }
});
