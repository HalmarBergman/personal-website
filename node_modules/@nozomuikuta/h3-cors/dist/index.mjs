import { getMethod, getRequestHeader, appendHeaders, defineEventHandler } from 'h3';
import { defu } from 'defu';

function resolveCorsOptions(options = {}) {
  const defaultOptions = {
    origin: "*",
    methods: "*",
    allowHeaders: "*",
    exposeHeaders: "*",
    credentials: false,
    maxAge: false,
    preflight: {
      statusCode: 204
    }
  };
  return defu(options, defaultOptions);
}
function isPreflight(event) {
  const method = getMethod(event);
  const origin = getRequestHeader(event, "origin");
  const accessControlRequestMethod = getRequestHeader(event, "access-control-request-method");
  return method === "OPTIONS" && !!origin && !!accessControlRequestMethod;
}
function isAllowedOrigin(origin, options) {
  const { origin: originOption } = options;
  if (!origin || !originOption || originOption === "*" || originOption === "null") {
    return true;
  }
  if (Array.isArray(originOption)) {
    return !!originOption.find((_origin) => {
      if (_origin instanceof RegExp) {
        return _origin.test(origin);
      }
      return origin === _origin;
    });
  }
  return originOption(origin);
}
function createOriginHeaders(event, options) {
  const { origin: originOption } = options;
  const origin = getRequestHeader(event, "Origin");
  if (!origin || !originOption || originOption === "*") {
    return { "Access-Control-Allow-Origin": "*" };
  }
  if (typeof originOption === "string") {
    return { "Access-Control-Allow-Origin": originOption, Vary: "Origin" };
  }
  const originHeader = origin;
  if (Array.isArray(originOption)) {
    return isAllowedOrigin(originHeader, options) ? { "Access-Control-Allow-Origin": originHeader, Vary: "Origin" } : {};
  }
  return originOption(originHeader) ? { "Access-Control-Allow-Origin": originHeader, Vary: "Origin" } : {};
}
function createMethodsHeaders(options) {
  const { methods } = options;
  if (!methods) {
    return {};
  }
  if (methods === "*") {
    return { "Access-Control-Allow-Methods": "*" };
  }
  return methods.length ? { "Access-Control-Allow-Methods": methods.join(",") } : {};
}
function createCredentialsHeaders(options) {
  const { credentials } = options;
  if (credentials) {
    return { "Access-Control-Allow-Credentials": "true" };
  }
  return {};
}
function createAllowHeaderHeaders(event, options) {
  const { allowHeaders } = options;
  if (!allowHeaders || allowHeaders === "*" || !allowHeaders.length) {
    const headers = getRequestHeader(event, "access-control-request-headers");
    return {
      "Access-Control-Allow-Headers": Array.isArray(headers) ? headers.join(",") : headers,
      Vary: "Access-Control-Request-Headers"
    };
  }
  return {
    "Access-Control-Allow-Headers": allowHeaders.join(","),
    Vary: "Access-Control-Request-Headers"
  };
}
function createExposeHeaders(options) {
  const { exposeHeaders } = options;
  if (!exposeHeaders) {
    return {};
  }
  if (exposeHeaders === "*") {
    return { "Access-Control-Expose-Headers": exposeHeaders };
  }
  return { "Access-Control-Expose-Headers": exposeHeaders.join(",") };
}
function appendCorsPreflightHeaders(event, options) {
  appendHeaders(event, createOriginHeaders(event, options));
  appendHeaders(event, createCredentialsHeaders(options));
  appendHeaders(event, createExposeHeaders(options));
  appendHeaders(event, createMethodsHeaders(options));
  appendHeaders(event, createAllowHeaderHeaders(event, options));
}
function appendCorsActualRequestHeaders(event, options) {
  appendHeaders(event, createOriginHeaders(event, options));
  appendHeaders(event, createCredentialsHeaders(options));
  appendHeaders(event, createExposeHeaders(options));
}

function defineCorsEventHandler(options) {
  const { preflight: { statusCode } } = resolveCorsOptions(options);
  return defineEventHandler((event) => {
    if (isPreflight(event)) {
      appendCorsPreflightHeaders(event, options);
      event.res.statusCode = statusCode;
      event.res.setHeader("Content-Length", "0");
      event.res.end();
    } else {
      appendCorsActualRequestHeaders(event, options);
    }
  });
}

export { appendCorsActualRequestHeaders, appendCorsPreflightHeaders, defineCorsEventHandler, isAllowedOrigin, isPreflight };
